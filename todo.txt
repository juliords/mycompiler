
Relatorio da apresentação:
- Exp do tipo char eh convertido pra inteiro
- Variavel char deve aceitar inteiro
- Adicionar expressao do tipo cast
- Tratar dimensao negativa
- Mudar ExpValue -> ExpConst
- Adicionar parametros às variaveis locais
- Tratar escopo de variaveis (blocos)
- Passar lista de variaveis por parametro (e não global)
- Comparacao (== e !=) deve aceitar referencia (dim > 0)
- Condicionais não devem aceitar referencia, para que a consistencia com os operadores logicos (|| e &&) permaneça
- Adicionar contagem de linha no proprio lex (buscar funcao que pega cada char)
- Passar valor da linha pela informacao semantica de cada palavra reservada
- Melhorar frases de erro
- tratar headers de maneira diferente
- transformar paramnode em decvarnode


----------------------------------------------

Tratamento de erros:
- String não fechada
- Char não fechado
- Comentario não fechado
- Variavel não declarada
- Falha no parser antes de ???
- Checagem de tipos em atribuição



----------------------------------------------

Gerar informações:

Quantidade de vezes que variavel eh lida/escrita
Quantidade de vezes que funcao eh chamada
Quantidade de elementos das listas
Dizer se variavel eh estatica, global ou local (automatica)


----------------------------------------------

Checagem de tipos:

- Chamada de funcao
- Retornos
- Atribuicoes
- Indexacao de array


----------------------------------------------

- Indexacao de arrays permite apenas inteiros

- Variavel indexada deve ser array

- Var e decVar devem ter sempre o mesmo numero de posicoes. Não é possivel
  operar sobre ponteiros.

- Como relacionar var com decvar?

- Como representar tipo? Tem como melhorar o atual?


----------------------------------------------

- Como realizar contagem de linhas corretamente no lex? Dado que comentarios
  podem fazer parte de mais de uma linha?
 
- Qual expressao regular deve ser usada para pegar comentarios e strings nao
  fechadas?

- Ao reconhecer um comentario, ele nao deve ser passado para a etapa do yacc,
  mas como fazer o lex nao retornar esse token, e comecar a processar a partir
  da primeira regra novamente? Chamar o yylex recursivamente é gambiarra!


